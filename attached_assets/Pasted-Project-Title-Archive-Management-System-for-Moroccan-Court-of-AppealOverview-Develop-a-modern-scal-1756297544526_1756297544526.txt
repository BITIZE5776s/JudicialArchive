Project Title: Archive Management System for Moroccan Court of AppealOverview:Develop a modern, scalable, and user-friendly web application for managing court document archives in a Moroccan Court of Appeal. 
The system must allow intuitive document organization, search, categorization, and retrieval using a hierarchical block system.Tech Stack:- Frontend: React.js (with optional Redux Toolkit for state 
management)- Backend: Express.js (Node.js)- Database: Supabase (PostgreSQL, Auth, Storage)- Deployment: Vercel (Frontend), Render or Railway (Backend)Core Features:1. Authentication & Authorization:- Use 
Supabase Auth for login/signup.- Users have roles: admin, archivist, viewer.- Only admins can manage users; archivists can add/edit documents; viewers have read-only access.2. Data Structure (Hierarchical 
Archiving):Implement the following hierarchy for organizing documents:- Blocks:  - Identified by labels: Block A → Block Z, then Block AA, AB...  - Table: `blocks(id, label, created_at)`- Rows (within 
blocks):  - 3 horizontal rows per block (e.g., A.1, A.2, A.3)  - Table: `rows(id, block_id, label, created_at)`- Sections (within rows):  - Multiple vertical sections per row (e.g., A.1.1, A.1.2...)  - Table: 
`sections(id, row_id, label, created_at)`- Documents:  - Placed inside a section.  - Each document has a unique reference: Block.[Row].[Section].[Doc Number] (e.g., Block A.1.1.1)  - Must be categorized: 
legal, financial, administrative, etc.  - Table: `documents(id, section_id, reference, category, metadata(JSON), created_at)`- Papers (within documents):  - Each document contains 1+ papers 
(topics/subjects).  - Table: `papers(id, document_id, title, content, attachment_url, created_at)`3. Functionalities:- Dynamic Filtering:  - Filter documents by: Block ID, Row ID, Section ID, Category.  - 
Filters should be combinable (multi-criteria search).- Main Table Display (in React):  - Show documents with columns: Block ID, Row ID, Section ID, Document ID, Category, Metadata.  - Each row is expandable 
to show papers (nested sub-table).- Document Upload/Edit:  - Allow archivists to add/edit metadata, upload files via Supabase Storage.- Paper Upload:  - Interface for adding/editing paper entries inside a 
document.  - Upload file and attach to paper.- User Management:  - Admin dashboard for managing users, roles, and permissions.4. UI Pages to Build:- Login Page (Supabase Auth)- Dashboard (list of blocks, 
rows, sections)- Document Browser (with filters, expandable rows)- Document Editor (create/edit document with metadata)- Paper Manager (view/add/edit papers in each document)- User Management Page (admins 
only)5. Database Initialization:- Populate test data:  - 10 blocks (A → J)  - 3 rows per block  - 4 sections per row  - 200+ documents randomly distributed  - Each document with 2–5 papers  - Include various 
categories (legal, financial, admin)6. Performance:- Must be optimized to handle large numbers of documents and nested papers without lag.- Search and filtering should be responsive and user-friendly.7. 
Internationalization:- Entire UI must support Arabic (Right-to-Left layout).8. Design Language:- Clean, modern, professional.- Suitable for government/legal institutional use.- Responsive layout for 
tablets/desktops.Goal:Build a fully functional MVP that demonstrates the archive structure, data relationships, advanced filtering, user roles, and nested document details.Deliverables:- React frontend with 
full UI components, filters, tables.- Express backend with API endpoints for each entity.- Supabase schema (tables, relations, auth rules, file storage).- Test data scripts to seed the database.- 
Deployment-ready build.Additional Instructions:Focus on creating modular, clean code. Use Supabase for backend wherever appropriate. Allow for scalability by building reusable components and properly 
structuring the data.web site must be in arabic 